// Copyright Â© 2023 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite (interfaces: DeviceUserEndpointHandler)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fosite "github.com/ory/fosite"
)

// MockDeviceUserEndpointHandler is a mock of DeviceUserEndpointHandler interface.
type MockDeviceUserEndpointHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceUserEndpointHandlerMockRecorder
}

// MockDeviceUserEndpointHandlerMockRecorder is the mock recorder for MockDeviceUserEndpointHandler.
type MockDeviceUserEndpointHandlerMockRecorder struct {
	mock *MockDeviceUserEndpointHandler
}

// NewMockDeviceUserEndpointHandler creates a new mock instance.
func NewMockDeviceUserEndpointHandler(ctrl *gomock.Controller) *MockDeviceUserEndpointHandler {
	mock := &MockDeviceUserEndpointHandler{ctrl: ctrl}
	mock.recorder = &MockDeviceUserEndpointHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceUserEndpointHandler) EXPECT() *MockDeviceUserEndpointHandlerMockRecorder {
	return m.recorder
}

// HandleDeviceUserEndpointRequest mocks base method.
func (m *MockDeviceUserEndpointHandler) HandleDeviceUserEndpointRequest(arg0 context.Context, arg1 fosite.DeviceUserRequester, arg2 fosite.DeviceUserResponder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDeviceUserEndpointRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDeviceUserEndpointRequest indicates an expected call of HandleDeviceUserEndpointRequest.
func (mr *MockDeviceUserEndpointHandlerMockRecorder) HandleDeviceUserEndpointRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeviceUserEndpointRequest", reflect.TypeOf((*MockDeviceUserEndpointHandler)(nil).HandleDeviceUserEndpointRequest), arg0, arg1, arg2)
}
