// Copyright Â© 2022 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite/handler/rfc8628 (interfaces: UserCodeStorage)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fosite "github.com/ory/fosite"
)

// MockUserCodeStorage is a mock of UserCodeStorage interface.
type MockUserCodeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserCodeStorageMockRecorder
}

// MockUserCodeStorageMockRecorder is the mock recorder for MockUserCodeStorage.
type MockUserCodeStorageMockRecorder struct {
	mock *MockUserCodeStorage
}

// NewMockUserCodeStorage creates a new mock instance.
func NewMockUserCodeStorage(ctrl *gomock.Controller) *MockUserCodeStorage {
	mock := &MockUserCodeStorage{ctrl: ctrl}
	mock.recorder = &MockUserCodeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCodeStorage) EXPECT() *MockUserCodeStorageMockRecorder {
	return m.recorder
}

// CreateUserCodeSession mocks base method.
func (m *MockUserCodeStorage) CreateUserCodeSession(arg0 context.Context, arg1 string, arg2 fosite.Requester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserCodeSession indicates an expected call of CreateUserCodeSession.
func (mr *MockUserCodeStorageMockRecorder) CreateUserCodeSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserCodeSession", reflect.TypeOf((*MockUserCodeStorage)(nil).CreateUserCodeSession), arg0, arg1, arg2)
}

// GetUserCodeSession mocks base method.
func (m *MockUserCodeStorage) GetUserCodeSession(arg0 context.Context, arg1 string, arg2 fosite.Session) (fosite.Requester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(fosite.Requester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCodeSession indicates an expected call of GetUserCodeSession.
func (mr *MockUserCodeStorageMockRecorder) GetUserCodeSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCodeSession", reflect.TypeOf((*MockUserCodeStorage)(nil).GetUserCodeSession), arg0, arg1, arg2)
}

// InvalidateUserCodeSession mocks base method.
func (m *MockUserCodeStorage) InvalidateUserCodeSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateUserCodeSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateUserCodeSession indicates an expected call of InvalidateUserCodeSession.
func (mr *MockUserCodeStorageMockRecorder) InvalidateUserCodeSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateUserCodeSession", reflect.TypeOf((*MockUserCodeStorage)(nil).InvalidateUserCodeSession), arg0, arg1)
}
